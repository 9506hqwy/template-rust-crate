name: CI

on:
  push:
    branches: [ main ]
    tags-ignore: [ '**' ]
  pull_request:

env:
  CARGO_TERM_COLOR: always

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]

    steps:
    - uses: actions/checkout@v4

    - name: Check Format
      if: matrix.os == 'ubuntu-latest'
      run: cargo fmt --all --check

    - name: Check Lint
      if: matrix.os == 'ubuntu-latest'
      run: |
        cargo clippy --fix
        git diff --exit-code --quiet

    - name: Run Tests
      env:
        RUSTFLAGS: '-C instrument-coverage'
        LLVM_PROFILE_FILE: '${{ github.workspace }}/target/profiles/default_%m_%p.profraw'
      run: cargo test --verbose

    - name: Generate Coverage Report (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools
        dotnet tool install -g dotnet-reportgenerator-globaltool

        TARGET_HOST=$(rustup show active-toolchain | sed -e 's/[^-]*-\(.*\)\s.*/\1/')
        TEST_BIN=($(cargo test --no-run 2>&1 | grep Executable | cut -d '(' -f 2 | cut -d ')' -f 1))
        OBJECT_ARGS=$(printf '%s\n' ${TEST_BIN[@]} | xargs -i echo --object={})

        profiles=$(find ./target/profiles -name 'default_*.profraw')

        export PATH="$(rustc --print sysroot)/lib/rustlib/${TARGET_HOST}/bin:$PATH"

        llvm-profdata merge \
            --sparse \
            --output=./target/profiles/default.profdata \
            $profiles

        llvm-cov export \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            ${OBJECT_ARGS} \
            --instr-profile=./target/profiles/default.profdata \
            --format=lcov \
            > ./target/profiles/coverage.lcov

        reportgenerator -reports:./target/profiles/coverage.lcov -targetdir:"./artifacts" -reporttypes:"MarkdownSummaryGithub;TextSummary"

        reportgenerator -reports:./target/profiles/coverage.lcov -targetdir:"./target/coverage_html" -reporttypes:"Html"
        tar -C ./target/coverage_html -zcf ./artifacts/coverage.tar.gz .

        llvm-cov report \
            --ignore-filename-regex='library/std/src' \
            --ignore-filename-regex='cargo/registry/src' \
            ${OBJECT_ARGS} \
            --instr-profile=./target/profiles/default.profdata

    - name: Generate Coverage Report (Windows)
      if: matrix.os == 'windows-latest'
      env:
        RUSTFLAGS: '-C instrument-coverage'
      run: |
        rustup component add llvm-tools
        dotnet tool install -g dotnet-reportgenerator-globaltool

        $TARGET_HOST = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'
        $TEST_BIN = ($(cargo test --no-run 2>&1) |? { "$_" -like '*Executable*' }) -replace '.*\((?<path>.*)\).*', '${path}'
        $OBJECT_ARGS = @($TEST_BIN) |% { "--object=$_" }

        $profiles = @(Get-ChildItem -Path '.\target\profiles\default_*.profraw' -Recurse)

        $env:PATH ="$(rustc --print sysroot)\lib\rustlib\${TARGET_HOST}\bin;${env:PATH}"

        llvm-profdata.exe merge `
            --sparse `
            --output=.\target\profiles\default.profdata `
            @($profiles |% { $_.FullName })

        llvm-cov.exe export `
            --ignore-filename-regex='library\std\src' `
            --ignore-filename-regex='cargo\registry\src' `
            ${OBJECT_ARGS} `
            --instr-profile=.\target\profiles\default.profdata `
            --format=lcov `
            > .\target\profiles\coverage.lcov

        reportgenerator -reports:.\target\profiles\coverage.lcov -targetdir:".\artifacts" -reporttypes:"MarkdownSummaryGithub;TextSummary"

        reportgenerator -reports:.\target\profiles\coverage.lcov -targetdir:".\target\coverage_html" -reporttypes:"Html"
        Compress-Archive -Path '.\target\coverage_html\*' -DestinationPath ".\artifacts\coverage.zip"

        llvm-cov.exe report `
            --ignore-filename-regex='library\std\src' `
            --ignore-filename-regex='cargo\registry\src' `
            ${OBJECT_ARGS} `
            --instr-profile=.\target\profiles\default.profdata

    - name: Report Coverage (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        cat "./artifacts/Summary.txt"
        cat "./artifacts/SummaryGithub.md" > $GITHUB_STEP_SUMMARY

    - name: Report Coverage (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        Get-Content ".\artifacts\Summary.txt"
        Get-Content ".\artifacts\SummaryGithub.md" > $env:GITHUB_STEP_SUMMARY

    - name: Create Artifacts
      run: |
        cargo build --release --workspace --all-features --verbose
        cargo build --release --workspace --all-features --examples --verbose
        cargo doc --workspace --all-features --verbose

    - name: Create Archive (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        RUST_TARGET=`rustup show active-toolchain | sed -e 's/[^-]*-\(.*\)\s.*/\1/'`

        CUR_DIR=$(pwd)
        LIB_DIR='./target/release'
        pushd "$LIB_DIR"
        FILES=$(find . -maxdepth 1 -type f \( -name '*.so' -o -name '*.a' -o -executable \))
        if [[ -n $FILES ]] ; then
            tar -zcf "${CUR_DIR}/artifacts/${RUST_TARGET}.tar.gz" $FILES
        fi
        popd

        EXAMPLE_DIR='./target/release/examples/'
        for EXAMPLE in $(find "$EXAMPLE_DIR" -type f -executable)
        do
            BASE_NAME=$(basename "${EXAMPLE}")
            if [[ ! $BASE_NAME =~ -[a-fA-F0-9]{16}$ ]] ; then
                tar -C "$EXAMPLE_DIR" -zcf "./artifacts/${BASE_NAME}-${RUST_TARGET}.tar.gz" "$BASE_NAME"
            fi
        done

        pushd "./target/doc"
        tar -zcf "${CUR_DIR}/artifacts/help-${RUST_TARGET}.tar.gz" *
        popd

        cargo install cargo-about
        cargo about generate -o artifacts/license.html about.hbs

        echo "RUST_TARGET=${RUST_TARGET}" >> $GITHUB_ENV

    - name: Create Archive (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        $RUST_TARGET = $(rustup show active-toolchain) -replace '[^-]*-(?<host>.*)\s.*', '${host}'

        $TARGETS = @(
          'target\release\*.exe',
          'target\release\*.dll',
          'target\release\*.exp',
          'target\release\*.lib'
        )
        $LIBS = @(Get-Item -Path $TARGETS)
        if ($LIBS.Length -gt 0) {
            Compress-Archive -Path $LIBS -DestinationPath ".\artifacts\${RUST_TARGET}.zip"
        }

        Get-Item -Path 'target\release\examples\*.exe' |% {
            if ($_.Name.Contains('_') -And (Test-Path (Join-Path $_.Directory $_.Name.Replace('_', '-')))) {
                return
            }

            $Name = $_.BaseName;
            Compress-Archive -Path $_ -DestinationPath ".\artifacts\${Name}-${RUST_TARGET}.zip";
        }

        Compress-Archive -Path 'target\doc\*' -DestinationPath ".\artifacts\help-${RUST_TARGET}.zip"

        cargo install cargo-about
        cargo about generate -o artifacts\license.html about.hbs

        Write-Output "RUST_TARGET=$RUST_TARGET" >> $env:GITHUB_ENV

    - name: Upload Artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ env.RUST_TARGET }}
        path: artifacts/
        retention-days: 1
